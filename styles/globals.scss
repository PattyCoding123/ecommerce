html,
body, * {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
  box-sizing: border-box;

}
::-webkit-scrollbar {
  width: 0px;
}

a {
  color: inherit;
  text-decoration: none;
}

/* 
  For the main container which houses the page components,
  we will set a max-width for it and keep the margin as auto
  to try and make it appear centered. We will also set the
  width to 100% so that it can have the responsiveness of
  filling out larger screens or reducing itself for smaller ones.

  Essentially, it will keep all our pages centered and will
  only allow them to expand up to a width of 1400px, which is
  how we can get the white space on both sides of the screen.
*/
.main__container{
  max-width: 1400px; 
  margin: auto;
  width: 100%;

}

/*
  The layout component will be given a padding of 10px all
  around to keep the Navbar and Footer from reaching
  the edges of the div.
*/
.layout-padding{
  padding: 10px;
}

span.text-blue {
  -webkit-text-stroke: 1px blue;
  margin-left: 6px;
}

/*
  The products-container div will be styled such that all 
  the Product cards will be flex items and are able to wrap 
  around the parent and will be center justified. Additionally, 
  there will be a gap to keep the cards separated.
*/
.products-container{
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 15px;
  margin-top: 20px;
  width: 100%;
}

// For the products heading div, have the <h2> and <p> element aligned
// in the center. Also, give some top-bottom paddings and a text color.
.products-heading{
  text-align: center;
  margin: 40px 0px;
  color: #324d67;

  // For the <h2> element of the products-heading, give a greater font
  // size and font-weight.
  h2 {
    font-size: 40px;
    font-weight: 800;
  }

  // For the <p> element of the products-heading, give a greater font
  // size and font-weight.
  p {
    font-size: 16px;
    font-weight: 200;
  }

}

/*
  For the cart wrapper, we want to make the width 100vw to make it take up
  100% of the width of the brower's window size. 

  The background will be black with an alpha level of 0.5 which is what gives
  the Cart component that distinct background when the sidebar pops up on the
  on the right.

  We also want to make sure to position it zero away from the top and right
  of the page so that it fits on the screen.
*/
.cart__wrapper{
  width: 100vw;
  background: rgba(0, 0, 0, 0.5);
  position: fixed;
  right: 0;
  top: 0;
  z-index: 100;
  /* will-change: transform; */
  transition: all 1s ease-in-out;

}

/*
  For the cart__container, we will style by making the height take up
  100% of the viewport while keeping the width about 600px wide.

  For the background, we want white so that our products and text can be
  easily displayed.

  We also want to make it float to the right of the cart_wrapper
  (which is how appears on the right side of the screen).
*/
.cart__container{
  height: 100vh;
  width: 600px;
  background-color: white;
  float: right;
  padding: 40px 10px;
  position: relative; 
}

/*
  For the button heading, we will make the display flex so that the icon
  and text appear in a row and will adjust themselves accordingly.

  We want to align the items in the center, and for the text, we will
  make them larger and bolder.

  The button should also make the user's cursor a pointer when 
  it is being hovered over.
  
  There should be no background or border.
*/
.cart__button-heading{
  display: flex;
  align-items: center;
  font-size: 18px;
  font-weight: 500;
  cursor: pointer;
  gap: 2px;
  margin-left: 10px;
  border: none;
  background-color: transparent;

  // For the span of text in the button, 
  // designate some margin on the left.
  .heading{
    margin-left: 10px;
  }
}

/*
  For the text displaying the number of items, also give
  margin on the left and make the color red to make
  it stand out to the user.
*/
.cart-num-items{
  margin-left: 10px;
  color: #f02d34;
}

/*
  For the cart__empty div which will display the empty text and
  button, give some margin all around and align the text in the center.

  The 40px margin helps avoid the div from expanding all the way to
  edges of the cart__container (the white sidebar) and making the
  button take up too much width.
*/
.cart__empty{
  
  margin:40px;
  text-align:center;

  h3 {
    font-weight: 600;
    font-size: 20px;
  }
  
}

.cancel {
  cursor: pointer;
}

/*
  To style the product__contianer in the cart, provide some margin at the top
  while also marking overflow as auto. Thus, if contents are no longer visible
  inside the padding box, then the desktop should provide a scrollwheel.

  The max-height should only be 70% of the viewport.
*/
.product__container{
  margin-top: 15px;
  overflow: auto;
  max-height: 70vh;
  padding: 20px 10px;
}

/*
  For each 'product' div, we will make the display flex such that the image
  appears first on the left.

  We also want a gap of 30px between each flex item, and we will have padding
  so each 'product' div doesn't seem to close to each other.
*/
.product__div{
  display: flex;
  gap: 30px;
  padding: 20px;

  .cart-product-image{
    width:180px ;
    height: 150px;
    border-radius: 15px;
    background-color: #ebebeb;
  }
}

// For each item description, we want to style each of the nested div's
// contained in this section.
.product__div-description {

  // For the flex stylings, the items will be displayed in flex with
  // space between. Additionally, this div will have a set width of 350px.
  .flex {
    display: flex;
    justify-content: space-between;
    width: 350px;
    color: #324d67;
  }  

  // For the 'bottom' class, we will make it such that these divs have a 
  // margin-top of 60px.
  .bottom {
    margin-top: 60px;
  }
}

// For items that have the flex styling, we will make the 
// font size for the <h5> and <h4> elements slightly larger.
.flex {
  h5 {
    font-size: 24px;
  }

  h4 {
    font-size: 20px;
  }
  
}

// For the div that displays the subtotal in the cart, we will make
// the contents flex with space-between so that they move to opposite ends.
.total {
  display: flex;
  justify-content: space-between;

  h3 {
    font-size: 22px;
  }
}

// For the remove-item
.remove-item {
  font-size: 24px;
  color: #f02d34;
  cursor: pointer;
  background: transparent;
  border: none;
}

/*
  For the cart__bottom container, we want to make the position absolute
  to match it with the cart__container which is already positioned.

  Additionally, we want to position it a little bit from the right and
  bottom of the container.
*/
.cart__bottom{
  position: absolute;
  bottom: 12px;
  right: 5px;
  width: 100%; // Make it 100% of the div
  padding: 30px 65px;

}

// For the .btn-container, make the div have a width of 400px
// and a margin of auto.
.btn-container{
  width: 400px;
  margin: auto;
}

/*
  For our buttons with the 'btn' styling, 
  we want the width to be 100% of the div that the buttons will be inside
  of while also keeping a max-width of 400px.

  We also want some padding to keep the text being too close to the edges
  of the button and we want to have some rounded corners using
  the border-radius.

  There should be no border outline and the text color should be white
  as the background of the button will be blue.
*/
.btn{
  width: 100%;
  max-width: 400px;
  padding: 10px 12px;
  border-radius: 15px;
  border: none;
  font-size: 20px;
  margin-top: 10px;
  margin-top: 40px;
  text-transform: uppercase;
  background-color: blue;
  color: #fff;
  cursor: pointer;

  /*
    If the user decides to hover over the button, then
    the button will increase in size as if it were 
    popping out.
  */
  transition: all 0.5s ease;

  &:hover {
    transform: scale(1.1,1.1);
  }
}



/*
  To style the product__detail-container, we will make the display flex such
  that the image displays and the text information appear side by side and
  positions themselves accordingly.

  We will also add some margins around the div and add gap to help make the
  flex items appear more separated.
*/
.product__detail-container{
  display: flex;
  gap: 40px;
  margin: 40px;
  margin-top: 60px;
  color: #324d67;
}

/*
  For the product__detail-image, have rounded corners and a gray-ish
  background color while also making it a set height and width. 
  The cursor should also be a pointer and the transitions should
  be 0.3s in duration.
*/
.product__detail-image{
  border-radius: 15px;
  background-color: #ebebeb;

  width: 400px;
  height: 400px;
  cursor: pointer;
  transition: .3s ease-in-out;

  // When the image is being hovered over, make the background
  // of the div blue.
  &:hover{
    background-color: blue;
  }
}

// The small__images-container will have its children as flex items,
// and they will have a gap of 10px in order to separate them.
.small__images-container{
  display: flex;
  gap: 10px;
  margin-top: 20px;
}

// Each small image will be about 70px in width and height.
// The pointer will also be a cursor when it is being hovered over.
.small-image{
  border-radius: 8px;
  background-color: #ebebeb;
  width: 70px;
  height: 70px;
  cursor: pointer;
}

// If the small image is the main one being displayed, make
// its background blue.
.selected-image{
  background-color:blue;
}

/* 
  For the reviews, make the color of the star icons blue.
  Additionally, make the display flex with the children items
  aligned in the center of the div.
*/
.reviews{
  color: blue;
  margin-top: 10px;
  display: flex;
  gap: 5px;
  align-items: center;

  // Make the <p> text color a blueish gray
  p {
    color: #324d67;
    margin-top: 0px;
  }
}

/*
  To style the product__detail-description container. we will
  make the <h4> and <p> tags have some extra margin. Also,
  for the price, we want to make the text bolder and larger
  with higher font-weight and font-size.
*/
.product__detail-description {
  h4, p {
    margin-top: 10px;
  }

  .price {
    font-weight: 700;
    font-size: 26px;
    margin-top: 30px;
    color: blue;
  }

  /*
    For the quantity section of the product__detail-description, we want to display
    the items in flex such that <h3> and <p> elements are in a row.
  */
  .quantity {
    display: flex;
    gap: 20px;
    margin-top: 10px;
    align-items: center;
    
  }
 
}

/*
  For the quantity__description, we the <p> element to have a solid border
  and some padding to make it appear as if there are separate boxes
  to increase and decrease the item quantity.

  We will make these stylings not nested under quantity as [slug] 
  and cart will both use these stylings.
*/
.quantity__description {
  border: 1px solid gray;
  padding: 6px;

  span {
    font-size: 16px;
    padding: 6px 12px;
    cursor: pointer;
  }

  .minus {
    // To make it seem as if there is a border
    border-right: 1px solid gray;
    color: red;
  }

  .num {
    // To make it seem as if there is a border
    border-right: 1px solid gray;
    font-size: 20px;
  }

  .plus {
    color: rgb(49, 168, 49);
  
  }

}

// For the product__detail description buttons, we want to display
// the buttons using flex and to have a gap so they appear more separated.
.product__detail-description .product__detail-buttons{
  display: flex;
  gap: 30px;

  /*
    For the .add-to-cart button, we will style it by giving some padding
    to have the text not touch the border of the button.

    We also want more font size and font weight and a set width. 

    If the user hovers over the button, it should increase in size subtly.
  */
  .add-to-cart {
    padding: 10px 20px;
    border: 1px solid blue ;
    margin-top: 40px;
    font-size: 18px;
    font-weight: 500;
    background-color: white;
    color: blue;
    cursor: pointer;
    width: 200px;
    transition: all 0.5s ease;

    &:hover{
      transform: scale(1.1,1.1)
    }

    // For smaller screens, make width only 150px.
    @media screen and (max-width:800px) {
      width: 150px
    }
  }

  // We will style the buy-now button similar to the add-to-cart button.
  .buy-now{
    width: 200px;
  
    padding: 10px 20px;
    background-color: blue;
    color: white;
    border: none;
    margin-top: 40px;
    font-size: 18px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.5s ease;

    &:hover{
      transform:scale(1.1,1.1)
    }
    
    // For smaller screens, make width only 150px.
    @media screen and (max-width:800px) {
      width: 150px
    }
  }
}

// Style the maylike-products-wrapper by giving some margin at the top
// and changing the styling of the h2 element.
.maylike-products-wrapper{
  margin-top: 120px;

  h2 {
    text-align: center;
    margin: 50px;
    color: #324d67;
  
    font-size: 28px;
  }

}

/*
  For the may-like-products container, have the component be a flex display
  with all the items center justified. Also, have a gap so the items appear
  somewhat separated from each other.
*/
.maylike-products-container{
  display: flex;
  justify-content: center;
  gap: 15px;
  margin-top: 20px;
}

/*
  For the marquee section of products, make the height 400px while taking up 100% of
  the div it is located in.

  Also, if there are too many items in the x-axis, make them hidden as they will animate
  across the screen.
*/
.marquee {
  position: relative; 
  height: 400px;
  width: 100%;
  overflow-x: hidden;
}

// To make the products move, we will use a linear animation that goes on for 15 seconds
// and take up 180% of the div width.
.track {
  position: absolute; // Position relative to the marquee div
  white-space: nowrap;
  will-change: transform;
  animation: marquee 15s linear infinite;
  width: 180%;

  // Stop the scrolling animation if the user hovers
  // over the div.
  &:hover {
    animation-play-state: paused;
  }
}

// To move items to the left of the div, starting at the center.
@keyframes marquee {
  from { transform: translateX(0); }
  to { transform: translateX(-50%); }
}

.max-qty{
  font-weight: 500;
  color: #f02d34;
}

// For the success wrapper, make the background white 
// and make the minimum height 60% of the viewport.
.success-wrapper {
  background-color: white;
  min-height: 60vh;

}

/*
  For the success div which contains the icon, <p> elements, and
  and Link component, make the width 1000px while also keeping the
  margin auto and margin-top 160px.

  For the padding, there should be about 50px all around to keep 
  the text and buttons from being too close to the edges of the box.

  The children of the div will be flex items in the vertical (column)
  direction. All items will be aligned and justified in the center.
*/
  .success  {
  width: 1000px;
  margin: auto;
  margin-top: 160px;
  background-color: #dcdcdc;
  padding: 50px;
  border-radius: 15px;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
+ 
  // The shopping bag icon will be green and 40px in size.
  .icon {
    color: green;
    font-size: 40px;
 }

  // For the <h2> element, the text-transform will be capitalize
  // and there will also be some extra font-weight and size.
  h2 {
    text-transform: capitalize;
    margin-top: 15px 0px;
    font-weight: 900;
    font-size: 40px;
    color:#324d67;
  }

  // For the gratitude message, it will be bolder, larger,
  // and aligned in the center of the flex row.
  .gratitude-msg {
    font-size: 16px;
    font-weight: 600;
    text-align: center;
 }

  // For the description message, make the font bolder
  // and center-aligned.
  .description {
    font-size: 16px;
    font-weight: 600;
    text-align: center;
    margin: 10px;
    margin-top: 30px;
  }
}

.product-max-qty{
  margin-top: 10px;
}

// For smaller devices, add these additional stylings to
// the elements/components.
@media screen and (max-width:800px) {

  // Make the product__detail-container in the [slug].js 
  // wrap the  flex items and provide some margin.
  .product__detail-container {
    flex-wrap: wrap;
    margin: 20px;

    // Make the images only 350px in width and height instead of 400px.
    .product__detail-image {
      width: 350px;
      height: 350px;
    }
  }

  // For the cart__container, make the width only 415px instead of 600px
  // and provide some additional heading.
  .cart__container {
    width: 415px;
    padding: 4px;
  }

  // For the cart__button-heading, provide additional margin to the top.
  .cart__button-heading {
    margin-top: 35px;
  }

  // For the product-container, provide additional margin to the top.
  .product__container {
    margin-top: 10px;
  }


  // For the product__div, give some additional padding while
  // decreasing the size of the product's image.
  .product__div{
    padding: 20px 5px;

    .cart-product-image {
      width: 25%;
      height: 25%;
    }
  }

  /*
    For the project__div-description, make divs with the 'flex'
    styling only have a width of 200px.

    For 'bottom' stylingss, give a margin-top of 30px.

    For 'top' stylings, make flex-wrap be wrap and have the gap
    be 10px.
  */
  .project__div-description {
    .flex {
      width: 200px;
    }

    .bottom {
      margin-top: 30px;
    }

    .top {
      flex-wrap: wrap;
      gap: 10px;
    }
  }
    
  // For the flex stylings, make the font sizes a little smaller.
  .flex {
    h5 {
      font-size: 16px;
      color: #324d67;
    }

    h4{
      font-size: 16px;
      color: black;
    }
  }
 
  // For cart__bottom, give some extra padding of 30px.
  .cart__bottom{
    padding: 30px;
  }

  // Have the <h3> element of the 'total' div be slightly smaller
  .total h3{
    font-size: 20px;
  }

  // For the marquee animation, make the duration only 10 seconds
  // but taking up 550% of the div width.
  .track {
    animation: marquee 10s linear infinite;
    width: 550%;
  }

  // For the success-wrapper, make the min-height 70% of the 
  // viewport instead of 60.
  .success-wrapper {
    min-height: 70vh;
  }

  // For the success styling, make the widht 370px instead of 1000 
  // and make the height 350px.
  .success {
    width: 370px;
    margin-top: 100px;
    padding: 20px;
    height: 350px;

    // The <h2> element will only be slightly larger.
    h2 {
      font-size: 17px;
    }
  }

  
  // For the btn-container, have the width be 300px with auto margins.
  .btn-container{
    width: 300px;
    margin: auto;
  }
}